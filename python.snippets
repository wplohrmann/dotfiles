snippet mul_inv! "Multiplicative inverse" A
def mul_inv(a, b):
    """
    return x1 s.t. (x1*a)%b == 1
    """
    b0 = b
    x0, x1 = 0, 1
    if b == 1:
        return 1
    while a > 1:
        if b == 0:
            return None
        q = a // b
        a, b = b, a%b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0:
        x1 += b0
    return x1
endsnippet
snippet shrug! "Shrug" A
¯\_(ツ)_/¯
endsnippet
snippet solution! "print solution for test case" A
print("Case #"+str(t+1)+":", solution)
endsnippet
snippet intput "Read integer input" A
int(input())
endsnippet
snippet mapintput "Read integer input list" A
map(int, input().split())
endsnippet
snippet T! "Read number of test cases for CJ" A
import numpy as np

def debug(*args, **kwargs):
    pass
debug = print

def solve():
    """
    """
    pass
if __name__=="__main__":
    T = int(input())

    for t in range(T):
        solution = solve()
        print("Case #"+str(t+1)+":", solution)
endsnippet
snippet '^( *)(.*?)pdb' "Set breakpoint with try" irA
`!p
if match.group(2) == "":
    snip.rv = f"{match.group(1)}import pdb; pdb.set_trace()"
else:
    snip.rv = f"""{match.group(1)}try:
	{match.group(1)}{match.group(2)}
{match.group(1)}except:
{match.group(1)}    import pdb; pdb.set_trace()
{match.group(1)}    print("PDB TIME")
    """
`
endsnippet

snippet '^( *)(.*?)s!' "Looping over list" brA
`!p snip.rv = match.group(1) + "for " + match.group(2) + " in " + match.group(2) + "s:\n" + match.group(1) + "    "`
endsnippet

snippet 'import (.*)!' "Rewriting python imports" brA
from `!p snip.rv = match.group(1)` import 
endsnippet

snippet 'if not (.*):!' "Negating not ifs" brA
if `!p snip.rv = match.group(1)`:
endsnippet

snippet 'if (.*):!' "Negating ifs" brA
if not `!p snip.rv = match.group(1)`:
endsnippet

snippet True! "negate" A
False
endsnippet

snippet False! "negate2" A
True
endsnippet

snippet tensorflow "import tensorflow" bA
import tensorflow as tf
endsnippet

snippet numpy "import numpy" bA
import numpy as np
endsnippet

snippet matplotlib "import matplotlib" bA
import matplotlib.pyplot as plt
endsnippet

snippet 'for (.*?) in (.*?):!' "enumerate" brA
`!p 
snip.rv = "for i, " + match.group(1) + " in enumerate(" + match.group(2) + "):"
`
endsnippet

post_jump "snip.buffer[snip.line] += ')'; snip.cursor.set(snip.line, -1)"
snippet "\(!" "right-jump paren"  rA
(
endsnippet

post_jump "snip.cursor.set(snip.line, snip.snippet_start[1]+1)"
snippet "([^=]*)\)!" "left-jump paren" rA
`!p
snip.rv = " (" + match.group(1) + ")"
`
endsnippet
